; multi-segment executable file template.

data segment
; add your data here!

CIRCULO: 
DW 0000000000000000B;
DW 0001111111111000B;
DW 0010000000000100B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0100000000000010B;
DW 0010000000000100B;
DW 0001111111111000B;
DW 0000000000000000B;
DW "$"

XIS: 
DW 0000000000000000B;
DW 0100000000000010B;
DW 0010000000000100B;
DW 0001000000001000B;
DW 0000100000010000B;
DW 0000010000100000B;
DW 0000001001000000B;
DW 0000000110000000B;
DW 0000000110000000B;
DW 0000001001000000B;
DW 0000010000100000B;
DW 0000100000010000B;
DW 0001000000001000B;
DW 0010000000000100B;
DW 0100000000000010B;
DW 0000000000000000B;

ends

stack segment
dw 128 dup(0)
ends

code segment
start:
    ; set segment registers:
    mov ax, data
    mov ds, ax
    mov es, ax
    
    ; add your code here
    
    MOV AH,0 ;SETA MODO VIDEO
    MOV AL,0DH ;320x200
    INT 10H ;CHAMA BIOS - PLACA VIDEO
    
    MOV SI,0A000H
    MOV ES,SI ; AGORA ES APONTA PARA O SEGMENTO DE VIDEO MODO GRAFICO
    
    MOV AH,1
    MOV AL,1
    LEA SI,LETRA_A 
    CALL ESCREVE_DISPLAY_GRAFICO
    
    ;wait for any key....
    mov ah, 1
    int 21h
    
    mov ax, 4c00h ; exit to operating system.
    int 21h

ESCREVE_DISPLAY_GRAFICO:
    PUSH AX
    MOV BL,20
    MUL BL
    MOV BL,8
    MUL BL
    ; AX = A L*BL = 1*40
    ; DI APONTARA PARA O OFFSET
    MOV DI,AX
    POP AX
    MOV AL,0
    XCHG AH,AL
    ADD DI,AX
ESCREVE:
    MOV AL, [SI]
    CMP AL, "$"
    JE SAI
    MOV ES:[DI],AL
    ADD DI,40
    INC SI
    JMP ESCREVE
SAI:
RET



ends

end start ; set entry point and stop the assembler.